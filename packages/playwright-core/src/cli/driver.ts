/* eslint-disable no-console */

import fs from 'fs';
import * as playwright from '../..';
import type { BrowserType } from '../client/browserType';
import type { LaunchServerOptions } from '../client/types';
import { createPlaywright, DispatcherConnection, RootDispatcher, PlaywrightDispatcher } from '../server';
import { PipeTransport } from '../protocol/transport';
import { PlaywrightServer } from '../remote/playwrightServer';
import { gracefullyProcessExitDoNotHang } from '../utils/processLauncher';

export function printApiJson() {
  // Note: this file is generated by build-playwright-driver.sh
  console.log(JSON.stringify(require('../../api.json')));
}

// fl main 002 启动 driver
export function runDriver() {
  const dispatcherConnection = new DispatcherConnection();
  new RootDispatcher(dispatcherConnection, async (rootScope, { sdkLanguage }) => {
    // fl main 003 开始 playwright
    const playwright = createPlaywright({ sdkLanguage });

    // fl dispatcher 001 | 开始 dispatcher 这一条线
    return new PlaywrightDispatcher(rootScope, playwright);
  });

  const transport = new PipeTransport(process.stdout, process.stdin);
  transport.onmessage = (message: string) => dispatcherConnection.dispatch(JSON.parse(message));
  // nt 在这里实现 dispatcher connection 的 onmessage
  dispatcherConnection.onmessage = message => transport.send(JSON.stringify(message));
  transport.onclose = () => {
    // Drop any messages during shutdown on the floor.
    dispatcherConnection.onmessage = () => {};
    gracefullyProcessExitDoNotHang(0);
  };
  // Ignore the SIGINT signal in the driver process so the parent can gracefully close the connection.
  // We still will destruct everything (close browsers and exit) when the transport pipe closes.
  process.on('SIGINT', () => {
    // Keep the process running.
  });
}

export type RunServerOptions = {
  port?: number,
  path?: string,
  extension?: boolean,
  maxConnections?: number,
  browserProxyMode?: 'client' | 'tether',
  ownedByTetherClient?: boolean,
};

export async function runServer(options: RunServerOptions) {
  const {
    port,
    path = '/',
    maxConnections = Infinity,
    extension,
  } = options;
  const server = new PlaywrightServer({ mode: extension ? 'extension' : 'default', path, maxConnections });
  const wsEndpoint = await server.listen(port);
  process.on('exit', () => server.close().catch(console.error));
  console.log('Listening on ' + wsEndpoint);
  process.stdin.on('close', () => gracefullyProcessExitDoNotHang(0));
}

export async function launchBrowserServer(browserName: string, configFile?: string) {
  let options: LaunchServerOptions = {};
  if (configFile)
    options = JSON.parse(fs.readFileSync(configFile).toString());
  const browserType = (playwright as any)[browserName] as BrowserType;
  const server = await browserType.launchServer(options);
  console.log(server.wsEndpoint());
}
